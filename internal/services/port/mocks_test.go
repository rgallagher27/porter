// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package port

import (
	"sync"
)

// Ensure, that storeMock does implement store.
// If this is not the case, regenerate this file with moq.
var _ store = &storeMock{}

// storeMock is a mock implementation of store.
//
//	func TestSomethingThatUsesstore(t *testing.T) {
//
//		// make and configure a mocked store
//		mockedstore := &storeMock{
//			InsertFunc: func(key string, v any) error {
//				panic("mock out the Insert method")
//			},
//		}
//
//		// use mockedstore in code that requires store
//		// and then make assertions.
//
//	}
type storeMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(key string, v any) error

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Key is the key argument value.
			Key string
			// V is the v argument value.
			V any
		}
	}
	lockInsert sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *storeMock) Insert(key string, v any) error {
	if mock.InsertFunc == nil {
		panic("storeMock.InsertFunc: method is nil but store.Insert was just called")
	}
	callInfo := struct {
		Key string
		V   any
	}{
		Key: key,
		V:   v,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(key, v)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedstore.InsertCalls())
func (mock *storeMock) InsertCalls() []struct {
	Key string
	V   any
} {
	var calls []struct {
		Key string
		V   any
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}
